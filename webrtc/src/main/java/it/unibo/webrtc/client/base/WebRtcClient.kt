package it.unibo.webrtc.client.base

import it.unibo.webrtc.capture.AudioController
import it.unibo.webrtc.capture.CameraController
import it.unibo.webrtc.capture.models.MediaOptions
import it.unibo.webrtc.common.Constraints
import it.unibo.webrtc.common.Disposable
import it.unibo.webrtc.connection.base.DataConnection
import it.unibo.webrtc.connection.base.MediaConnection
import org.webrtc.MediaConstraints
import org.webrtc.SurfaceViewRenderer

interface WebRtcClient : Disposable {

    /**
     * Connects to the signalling server.
     * @param peerId The peer id; if not provided a unique id will be generated by the server.
     * @return The peer id.
     */
    suspend fun connect(peerId: String? = null): String

    /**
     * Disconnects from the signalling server.
     */
    fun disconnect()

    /**
     * Determines whether the client is connected to the signalling server or not.
     */
    fun connected(): Boolean

    /**
     * Retrieves the list of active peers from the signalling server.
     * @return The list of all peer ids.
     */
    suspend fun getActivePeers() : List<String>

    /**
     * Initializes the local media stream.
     * @param options The options for the media stream.
     * @param renderer The surface view renderer.
     * @param isMirrored Whether the playback should be flipped horizontally or not.
     */
    fun initLocalMedia(options: MediaOptions, renderer: SurfaceViewRenderer? = null, isMirrored: Boolean = false)

    /**
     * Requests a data exchange to a remote peer.
     * @param remotePeerId The remote peer id.
     * @param label The data channel label (default: random).
     * @return The rtc data connection.
     */
    suspend fun exchangeData(remotePeerId: String, label: String? = null): DataConnection

    /**
     * Calls a remote peer.
     * @param remotePeerId The remote peer id.
     * @param constraints The media constraints.
     * @return The rtc media connection.
     */
    suspend fun call(remotePeerId: String, constraints: MediaConstraints = Constraints.buildDefaultMediaConstraints()): MediaConnection

    /**
     * Retrieves the camera controller.
     * @return The camera controller
     */
    fun getCameraController(): CameraController

    /**
     * Retrieves the audio controller.
     * @return The audio controller
     */
    fun getAudioController(): AudioController
}